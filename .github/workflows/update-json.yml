name: Generate update.json

on:
  release:
    types: [published]

jobs:
  update-json:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main   # Hardcoded to main branch

      - name: Get latest release info
        id: release
        uses: actions/github-script@v7
        with:
          script: |
            const release = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: context.payload.release.tag_name
            });
            return {
              version: release.data.tag_name.replace(/^v/, ''),
              zipUrl: release.data.assets[0]?.browser_download_url || release.data.zipball_url
            };

      - name: Generate update.json
        run: |
          VERSION=${{ steps.release.outputs.version }}
          ZIP_URL=${{ steps.release.outputs.zipUrl }}
          
          # Get current versionCode or default to 1
          if [ -f update.json ]; then
            VERSIONCODE=$(jq '.versionCode' update.json)
            VERSIONCODE=$((VERSIONCODE+1))
          else
            VERSIONCODE=1
          fi
          
          cat <<EOF > update.json
          {
            "version": "$VERSION",
            "versionCode": $VERSIONCODE,
            "zipUrl": "$ZIP_URL",
            "changelog": "https://github.com/${{ github.repository }}/releases/tag/v$VERSION"
          }
          EOF

      - name: Commit and Push update.json
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add update.json
          git commit -m "Auto-update update.json for v${{ steps.release.outputs.version }}"
          git push origin HEAD:main
